Due to the desired scale of the system, we do not assume that all
the information required by the continuous queries and
intermediate results will fit in memory. Caching is used to
obtain good performance with a limited amount of memory.
NiagaraCQ caches query plans, system data structures, and data
files for better performance.
1. Grouped query plans tend to be memory resident since we
assume that the number of query groups is relatively small.
Non-grouped change-based queries may be cached using an
LRU policy that favors frequently fired queries. Timer-based
queries with shorter firing intervals will have priority over
those with longer intervals.
2. NiagaraCQ caches recently accessed files. Small delta files
generated by split operators tend to be consumed and
discarded. A caching policy that favors these small files saves
lots of disk I/Os.
3. The event list for monitoring the timer-based events can be
large if there are millions of timer-based continuous queries.
To avoid maintaining the whole list in memory, we keep only
a “time window” of this list. The window contains the front
part of the list that should be kept in memory, e.g. within 24
hours.