We now turn to the evaluation of the profile adaptation
technique presented in section 3.4 and described by formula
4.
The first 702,892 queries of the original Citeseer query
log were used for training and the retrieval with adapted
profiles was then performed on the usual test set, consisting
of the last 10,000 queries of the log. Updates of profiles were
only performed during training, not during the evaluation of
queries in the test set. From now on, all results are in terms
of RP@10 only since we do not have relevance judgments for
Citeseer.
Figure 2 (a) shows the performance of CORI baseline runs
that use adapted profiles as compared to the CORI baseline
with unadapted profiles for profile lengths of 10 and 80
terms. There is improvement for each number of peers visited.
Figure 2 (b) shows the relative improvement of adapted
profiles over unadapted ones as a function of the number of
peers visited, calculated as
where RP@10adapted and RP@10base refer to the RP@10
scores of the adapted run and the corresponding CORI baseline
run, respectively.
We can see that generally the relative improvement of
profile-adapted runs over the baseline is always greater than
5%, i.e. can be considered to be meaningful. Apart from
profile length 10 the relative improvement curves have very
similar shapes, with a tendency of smaller profiles gaining
more from profile adaptation and relative improvement decreasing
as more peers are visited.
Among the first 15 peers, the relative improvement for all
profile sizes is greater than 10%, the improvement for the
very first peer is at around 20% for all profile sizes except
10 terms.
All in all, the results of profile adaptation experiments are
very encouraging. Of course, one should note that this analysis
only revealed the potential improvement gained by profile
adaptation: the evaluation optimistically assumed that
training queries reach all peers that possess one of the query
terms, something which is probably not the case in a P2PIR
system. However, if a query routing algorithm maintains a
random component (so that peers that are initially ranked
lowly for a query may still be visited), this potential is very
likely to be exploited â€“ although it may take more queries
to do so.