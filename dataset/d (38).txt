Replication can be used in a publish/subscribe system to in-
crease its availability and reliability when faced with server
failures or network partitions. In a replicated publish/-
subscribe system (Figure 6), a user's subscription is mon-
itored by multiple Event Brokers independently. In partic-
ular, in Figure 6 we assume that two EBs, EB1 and EB2,
simultaneously monitor the subscriptions for each user. On
the other hand, we assume that there is still only one Event
Displayer associated with each user, because, as we have
discussed before, the ED is usually a program running on
the PDA which the user carries with him/her. Hence, the
two streams of events generated by EB1 and EB2 will merge
at the ED. Note that for simplicity we use a centralized ar-
chitecture as the basis for replication. Although we do not
discuss it here, replication can also be introduced in a dis-
tributed system like the ones in Figures 4 and 5.
With replication, a user is less likely to miss events. For
instance, suppose that EB1 misses some events from a par-
ticular mobile source which can only communicate with EB2
due to temporary network problems3. Then the events can
still be matched by EB2 and delivered to the appropriate
EDs. However, without any safeguards, replication can cre-
ate \consistency" problems in a publish/subscribe system.
Specically, the user may receive a sequence of events that
are confusing or even contradictory. As a simple example,
without a mechanism to eliminate duplicates, the same event
may get delivered to the user twice, once from each EB. The
user will get confused if he/she relies on the events to keep
track of an important count, such as the exact number of
missiles that have been red.
As another example, although it is not dicult to make
3We assume that events can be lost when they are sent from
their source to an EB. However, since we assume that the EB
buers and retransmits events as necessary, the link between
the EB and the ED is assumed to be lossless.
a single EB always deliver events from the same source in
order, replication can often result in an unordered event se-
quence when events from the two EBs are interleaved at the
ED. For instance, suppose event number 3 is missed by EB1
but received by EB2. It is therefore entirely possible for EB1
to deliver the next event, say number 4, to the user before
EB2 could have a chance to deliver event 3. Out-of-order
event streams can be a problem if the order of events is sig-
nicant, for example to establish a trend in the movements
of a stock's price.
We can dene three desirable properties for a replicated pub-
lish/subscribe system: Orderedness, Consistency and
Completeness. The goal in general is to rule out deliv-
eries of events to a user that could not have occurred with
a non-replicated system. Intuitively, orderedness indicates
that events from the same ES are delivered to the user in the
order they are generated at the ES. Since a non-replicated
system delivers events in this order, a replicated system that
is ordered behaves similarly in this respect.
For a replicated system to be consistent, the set of events
it displays to an end user over time must be a set that can
possibly be generated by a non-replicated system (although
perhaps in a dierent order). In other words, a user should
not be able to tell, from observing the events that are dis-
played to him/her, that replication is being used (except for
possibly increased reliability and responsiveness). For ex-
ample, a replicated system that delivers duplicates to the
end user is trivially not consistent.
Lastly, completeness requires a replicated system R to dis-
play all events that would be displayed by an equivalent
non-replicated system N had the single EB in N received
all events that were received by EB1 or EB2 in R. For exam-
ple, if an event matching the user's subscription arrives at
EB1 but is missed by EB2 due to network packet loss, then
a complete replicated system will need to ensure that the
event is not discarded (see next on Event Displayer lter-
ing) and is ultimately delivered to the user. Completeness
is a measurement of how eective a replicated system is at
guarding against loss of events in the network. Our three
notions of correctness are dened more formally in [12].
Obviously, if the Event Displayer simply passes along any
event it receives to the user, the resulting replicated system
will be neither consistent (due to duplicates) nor ordered.
Table 1 summarizes properties satised by a replicated sys-
tem under various congurations, with the rst row being
when no special processing is done by the ED. However, as
we will see next, some system properties can be enhanced or
enforced if the ED performs an extra step to lter out some
events (e.g., duplicates) before passing them on to the user.
In the simplest example, the ED can implement a straight-
forward \exact duplicate elimination" algorithm, in which
an event is discarded by the ED if an \identical" one has
already been displayed previously. The exact denition of
\identical" is given in [12]. The modied system properties
under this ED ltering algorithm are listed in the second row
of Table 1. As shown in the table, the system has gained
consistency as a result.
Table 1: Properties satised by a replicated pub-
lish/subscribe system under various ED ltering al-
gorithms.
For situations where an ordered event stream is imperative,
an ED ltering algorithm has been proposed in [12] to en-
force orderedness of a replicated system. Essentially, the
ED records the last seen sequence number from each Event
Source and discards any new event that arrives out of or-
der. The disadvantage of this algorithm, however, is that
the system is no longer complete, since some events may
be \unnecessarily" ltered out based on their arrival order
rather than their content. The tradeo of completeness ver-
sus orderedness should be decided by the individual appli-
cations. The last row in Table 1 gives the system properties
under a combined ltering algorithm that guarantees both
orderedness and consistency.
Reference [12] oers an in-depth study of replication in pub-
lish/subscribe systems. For instance, it discusses systems
with the ability to generate new events based on patterns in
a stream of events. It is shown that such systems are usually
inconsistent, because event loss can often lead to divergent
perceptions between the two EBs about what constitutes a
triggering pattern. Consequently, more sophisticated ED l-
tering algorithms are developed to guarantee consistency in
such scenarios. Additionally, subscriptions dened on event
\joins" from dierent streams are also studied. The pa-
per also investigates multiple subscriptions submitted by the
same user that are interrelated and need to be monitored in
a coherent fashion.