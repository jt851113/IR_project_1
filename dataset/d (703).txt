To understand how the time to answer a query is distributed
amongst various tasks, we ran some micro-benchmarks against our
system. Figure 12 shows the breakdown of query processing time
depending on at which level in the hierarchy the query was asked.
The query used in this experiment was a query of type 1 asking for
one particular block. Even though this query will always be routed
to the site that owns the neighborhood, we artificially routed this
query to the sites higher up in the hierarchy to see the effect of the
number of hops taken by the query. Three settings were studied:
small database with naive XSLT creation, small database with fast
XSLT creation, and large database with fast XSLT creation.
As we can see, for all of the scenarios, the total processing time
consumed by the query is reduced significantly (by over 50%) if
the query is routed directly to the site that has the data, once again
demonstrating the effectiveness of self-starting distributed queries.
This experiment also shows why we chose to optimize the XSLT
query creation time. As we can see, if the XSLT query is generated
and compiled using traditional interfaces, then the time taken
for this completely dominates the overall query processing time.
Using direct compilation to XSLT from the original XPATH query
reduces the overall query processing time by over 50%!
To see how our query processing mechanism scales with respect
to the database size, we increased the total size of the database by a
factor of 8 by doubling the number of neighborhoods, the number
of blocks in a neighborhood, and the number of parking spaces in
a block. As we can see, the processing time increased by less than
20% at each of the nodes!
These micro-benchmarks also show where the bottlenecks in our
current prototype are. As we can see, most of the time is spent in
executing the XSLT query and during CPU processing for communication.
The communication part also includes the cost of constructing
and deconstructing the messages. We believe that much
of this is because we are using Java 1.3; using JIT (just-in-time
compilation) and newer XSLT processing packages should significantly
reduce this time.