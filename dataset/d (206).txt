The database community has proposed a number of distributed and push-down based approaches for aggregates in database systems [26, 33], but these universally assume a well-connected, low-loss topology that is unavailable in sensor networks. None of these systems present techniques for loss tolerance or power sensitivity. Furthermore, their notion of aggregates is not tied to a taxonomy, and so techniques for transparently applying various aggregation and routing optimizations are lacking. The partial preaggregation techniques [15] used to enable group eviction were proposed as a technique to deal with very large numbers of groups to improve the ef?ciency of hash joins and other bucket-based database operators.
The ?rst three components of the partial-state dimension of the taxonomy presented in Section 3.2 (e.g. algebraic, distributive, and holistic) were originally developed as a part of the research on data-cubes [9]; the duplicate sensitivity, exemplary vs. summary, and monotonicity dimensions, as well as the unique and content-sensitive state components of partial-state are our own addition. [29] discusses online aggregation [11] in the context of nestedqueries; it proposes optimizations to reduce tuple-?ow between outer and inner queries that bear similarities to our technique of pushing HAVING clauses into the network.
With respect to query language, our epoch based approach is related to languages and models from the Temporal Database literature; see [27] for a survey of relevant work. The Cougar project at Cornell [23] discusses queries over sensor networks, as does our own work on Fjords [18], although the former only considers moving selections (not aggregates) into the network and neither presents speci?c algorithms for use in sensor networks.
Literature on active networks [30] identi?ed the idea that the network could simultaneously route and transform data, rather than simply serving as an end-to-enddata conduit. The recent SIGCOMM paper on ESP [4] provides a constrained framework for in network aggregation-like operations in a traditional network. Within the sensor network community, work on networks that perform data analysis is largely due to the USC/ISI and UCLA communities. Their work on directed diffusion [13] discusses techniques for moving speci?c pieces of information from one place in a network to another, and proposes aggregation-likeoperations that nodes may perform as data ?ows through them. Their work on low-levelnaming[10] proposes a scheme for imposing names onto related groups of devices in a network, in much the way that our scheme partitions sensor networks into groups. Work on greedy aggregation [12] discusses networking protocols for routing data to improve the extent to which data can be combined as it ?ows up a sensor network – it provides low level techniques for building routing trees that could be useful in computing TAG style aggregates.
These papers recognize that aggregation dramatically reduces the amount of data routed through the network but present application-speci?c solutions that, unlike the declarative query approach approach of TAG, do not offer a particularly simple interface, ?exible naming system, or any generic aggregationoperators. Because aggregationis viewed as an application-speci?c operation in diffusion, it must always be coded in a low-level language. Although some TAG aggregates may also be application-speci?c, we ask that users provide certain functional guarantees, such as composability with other aggregates, and a classi?cation of semantics (quantity of partial state, mono
tonicity, etc.) which enable transparent application of various optimizations and create the possibility of a library of common aggregates that TAG users can freely apply within their queries. Furthermore, directed diffusion puts aggregation APIs in the routing layer, so that expressing aggregates requires thinking about how data will be collected, rather than just what data will be collected. This is similar to old-fashionedquery processingcode that thought about navigating among records in the database – by contrast, our goal is to separate the expression of aggregation logic from the details of routing. This allows users to focus on application issues and enables the system to dynamically adjust routing decisions using general (taxonomic) informationabout each aggregation function.
Networking protocols for routing data in wireless networks are very popular within the literature [14, 1, 8], however, none of them address higher level issues of data processing, merely techniques for data routing. Our treebased routing approach is clearly inferior to these approaches for peer to peer routing, but works well for the aggregation scenarios we are focusing on. Work on (N)ACKs (and suppression thereof) in scalable, reliable multicast trees [6, 17] bears some similarity to the problem of propagating an aggregate up a routing tree in TAG. These systems, however, consider only ?xed, limited types of aggregates (e.g. ACKs or NAKs for regions or recovery groups.) Finally, we presented an early version of this work in a workshop publication [20].
