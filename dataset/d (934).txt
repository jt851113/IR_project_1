Assume that the Originator peer issues a top-k query in the p2p
network. The query is routed from Contributor super-peers to
Contributor peers according to the applied routing strategy and
these peers and their ranked objects are taken as input in the HTp2p
algorithm. An instance of HT-p2p is executed by the
Collector super-peer to process the incoming top-k query. The
processing steps of HT-p2p are the following:
Phase 1: Each Contributor peer sends its top-k objects to the
Collector super-peer. The latter calculates the partial sums for all
objects seen so far and identifies the objects with the k highest
partial sums. The Collector super-peer stores all intermediate
results of this phase (seen objects, scores, and their partial sums).
For an object O, the partial sum Spsum(O) = S’1(O) + … +
S’m(O) where S’i(O) = Si(O) if O has been reported by peer i to
the super-peer, and S’i(O) = 0 otherwise. An object has been
reported by a peer if it has been sent with its score to a super-peer
at least once, so it has been stored.
Phase 2: The Collector super-peer sends the list L and the
threshold T = τ1/m to all the Contributor peers in the p2p network,
where: {L = list of the top-k object IDs from the partial sum list,
τ1 called “phase1 bottom” = the k-th highest partial sum and m =
the number of peers at the specified cluster of super-peer}. Upon
receiving the list L, for each object Oj in L: peer i finds its local
score termed Sij, and determines the lowest local score S_lowest
(i) among all the k objects in L. If the object Oj does not occur in
the list of peer i then Sij= 0. Then peer i sends the list of local
objects whose values are greater than or equal to Ti, where
Ti=max(S_lowest(i),T), to the collector super-peer. If a score for
an object of a specified peer has been sent in previous phase there
is no need for the peer to send it again. Now the super-peer
calculates the partial sums for all the objects seen so far, and
identifies the objects with the k highest partial sums. The kth
highest partial sum called “phase-2 bottom” and is denoted by τ2.
The Collector Super-peer denotes Tpatch = τ2 /m. If (Ti < Tpatch)
the collector Super-peer sends these objects (with the k-highest
partial sums) as top-k objects to the originator super-peer which
returns them to the originator peer and the algorithm terminates.
But if (Ti > Tpatch), then two additional phases (Phase 3 & 4) are
needed for each peer i where the above condition is true. The
Collector super-peer stores all the intermediate results of this
phase (seen objects, their scores, their partial sums).
Phase 3 (patch phase if necessary): The Collector super-peer
sends Tpatch to peer i as the threshold and asks for all objects
whose scores are no less than Tpatch to be sent. Now the superpeer
calculates the partial sums for all the objects seen so far, and
identifies the objects with the k highest partial sums. The kth
highest partial sum called “phase-3 bottom” and is denoted by τ3.
Then the super-peer tries to prune away more objects by
calculating the upper bounds of the objects seen and have stored
so far. An upper bound for an object O (Usum(O))is calculated by
the formula: Usum(O)= S’1(O) + S’2(O), + … S’m(O), where:
S’i(O) = Si(O) if O has been reported by node i; S’i(O) = min(Ti,
Tpatch) otherwise. Then the super-peer removes any object Oj
from the candidate set whose upper bound is less than τ3 and
returns the top-k candidate set.
Phase 4 (necessary if we run Phase 3): Since the Collector
super-peer stores the intermediate results in this phase it just
calculates the real scores for the top-k candidate set as it has been
returned from the previous phase and then identifies the exact topk
objects. Finally it sends the top-k objects to the originator superpeer
which returns them to the originator peer.
Accordingly to this algorithm, our ad-hoc policy in HT-p2p is the
following: “When phase 1 of HT-p2p starts all the online
contributor peers and their scores are considered. When a peer
leaves the p2p network later, the algorithm continues to consider
its data as they are valid despite the peer’s offline status.
However, in this case for consistency reasons we reduce the
number of available contributor peers which is used for
determining Tpatch threshold. Also, since the top-k query is
routed to a set of relevant contributor peers, if a new peer enters
the p2p network during the execution of HT-p2p, it cannot be
examined until the next relevant top-k query is issued.