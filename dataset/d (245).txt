In lieu of a explicit SAMPLE INTERVAL clause, users may request a speci?c query lifetime via a QUERY LIFETIME <x> clause, where < x > is a duration in days, weeks, or months. Specifying lifetime is a much more intuitive way for users to reason about power consumption. Especially in environmental monitoring scenarios, scienti?c users are not particularly concerned with small adjustments to the sample rate, nor do they understand how such adjustments in?uence power consumption. Such users, however, are very concerned with the lifetime of the network executing the queries. Consider the query: 
This query speci?es that the network should run for at least 30 days, sampling light and acceleration sensors at a rate that is as quick as possible and still satis?es this goal.
To satisfy a lifetime clause, TinyDB performs lifetime estimation. The goal of lifetime estimation is to compute a sampling and transmission rate given a number of Joules of energy remaining. We begin by considering how a single node at the root of the sensor network can compute these rates, and then discuss how other nodes coordinate with the root to compute their delivery rates. For now, we also assume that sampling and delivery rates are the same. On a single node, these rates can be computed via a simple cost-based formula, taking into account the costs of accessing sensors, selectivities of operators, expected communication rates and current battery voltage. We show below a lifetime computation for simple queries of the form: 
To simplify the equations in this example, we present a query with a single selection predicate which is applied after attributes have acquired. The ordering of multiple predicates and interleaving of sampling and selection are discussed in detail in Section 4. Table 1 shows the parameters we use in this computation (we do not show processor costs since they will be negligible for the simple selection predicates we support, and have been subsumed into costs of sampling and delivering results.)
To illustrate the effectiveness of this simple estimation, we inserted a lifetime-based query (SELECT voltage, light FROM sensors LIFETIME x) into a sensor (with a fresh pair of AA batteries) and asked it to run for 24 weeks, which resulted in a sample rate of 15.2 seconds per sample. We measured the remaining voltage on the device 9 times over 12 days. The ?rst two readings were outside the range of the voltage detector on the mote (e.g. they read “1024” – the maximum value) so are not shown. Based on experiments with our test mote connected to a power supply, we expect it to stop functioning when its voltage reaches 350. Figure 4 shows the measured lifetime at each point in time, with a linear ?t of the data, versus the “expected voltage” which was computed using the cost model above. The resulting linear ?t of voltage is quite close to the expected voltage. The linear ?t reaches V=350 about 5 days after the expected voltage line.
Given that it is possible to estimate lifetime on a single node, we now discuss coordinating the tranmission rate across all nodes in the routing tree. Since sensors need to sleep between relaying of samples, it is important that senders and receivers synchronize their wake cycles. To do this, we allow nodes to transmit only when their parents in the routing tree are awake and listening (which is usually the same time they are transmitting.) By transitivity, this limits the maximum rate of the entire network to the transmission rate of the root of the routing tree. If a node must transmit slower than the root to meet the lifetime clause, it may transmit at an integral divisor of the root’s rate.4 To propagate this rate through the network, each parent node (including the root) includes its transmission rate in queries that it forwards to its children.
The previous analysis left the user with no control over the sample rate, which could be a problem because some applications require the ability to monitor physical phenomena at a particular granularity. To remedy this, we allow an optional MIN SAMPLE RATE r clause to be supplied. If the computed sample rate for the speci?ed lifetime is greater than this rate, sampling proceeds at the computed rate (since the alternative is expressible by replacing the LIFETIME clause with a SAMPLE
INTERVAL clause.) Otherwise, sampling is ?xed a rate of r and the prior computation for transmission rate is done assuming a different rate for sampling and transmission. To provide the requested lifetime and sampling rate, the system may not be able to actually transmit all of the readings – it may be forced to combine (aggregate) or discard some samples; we discuss this situation (as well as other contexts where it may arise) in Section 6.2.
Finally, we note that since estimation of power consumption was done using simple selectivity estimation as well as cost-constants that can vary from node-to-node (see Section 4.1) and parameters that vary over time (such as number of children, C), we need to periodically re-estimate power consumption. Section 6.3.1 discusses this runtime re-estimation in more detail.
