After the query has been optimized, it is disseminated into the network; dissemination begins with a broadcast of the query from the root of the network. As each sensor hears the query, it must if decide the query applies locally and/or needs to be broadcast to its children in the routing tree. We say a query q applies to a node n if there is a non-zero probability that n will produce results for q. Deciding where a particular query should run is an important ACQP-related decision. Although such decisions occur in other distributed query processing environments, the costs of incorrectly initiating queries in ACQP environments like TinyDB can be unusually high, as we will show.
If a query does not apply at a particular node, and the node does not have any children for which the query applies, then the entire subtree
rooted at that node can be excluded from the query, saving the costs of disseminating, executing, and forwarding results for the query across several nodes, signi?cantly extending the node’s lifetime.
Given the potential bene?ts of limiting the scope of queries, the challenge is to determine when a node or its children need not participate in a particular query. One common situation arises with constant-valued attributes (e.g. nodeid or location in a ?xed-location network) with a selection predicate that indicates the node need not participate. Similarly, if a node knows that none of its children will ever satisfy the value of some selection predicate, say because they have constant attribute values outside the predicate’s range, it need not forward the query down the routing tree. To maintain information about child attribute values , we propose the use of a semantic routing tree (SRT). We describe the properties of SRTs in the next section, and brie?y outline how they are created and maintained.