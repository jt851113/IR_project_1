We now turn to the problem of adapting tuple delivery rate to meet speci?c lifetime requirements in response to incorrect sample rates computed at query optimization time (see Section 3.3). We ?rst note that, using similar computations to those shown Section 3.3, it is possible to compute a predicted battery voltage for a time t seconds into processing a query. We omit the calculation due to space constraints.
The system can then compare its current voltage to this predicted volt age. By assuming that voltage decays linearly (see Figure 4 for empirical evidence of this property), we can re-estimate the power consumption characteristics of the device (e.g. the costs of sampling, transmitting, and receiving) and then re-run our lifetime calculation. By re-estimating these parameters, the system can ensure that this new lifetime calculation tracks the actual lifetime more closely.
Although this calculation and re-optimization are straightforward, they serve an important role by allowing sensors in TinyDB to satisfy occasional ad-hoc queries and relay results for other sensors without compromising the lifetime goals of long running monitoring queries.
Finally, we note that incorrect measurements of power consumption may also be due to incorrect estimates of the cost of various phases of query processing, or may be as a result of incorrect selectivity estimation. We cover both by tuning sample rate. As future work, we intend to explore adaptation of optimizer estimates and ordering decisions (in the spirit of other adaptive work like Eddies [6]) and the effect of frequency of re-estimation on lifetime (currently, in TinyDB, re-estimation can only be triggered by an explict request from the user.)
