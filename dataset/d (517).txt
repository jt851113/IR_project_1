The performance evaluation consists of two parts, one for
the complete approach and the other for the scheduling
algorithm only. The simulation is run on a Pentium III 700
processor with 512k cache and 128M memory. In the
simulation, we assume that the average access time denotes
the number of broadcast buckets needed to be accessed for
downloading the set of desired data objects. To evaluate the
performance of the complete approach, a set of experiments
is performed based on various sets of query patterns. We
compare the average access time for the broadcast program
generated by the approach with the lower bound on the
average access time for the optimal broadcast program of
the query patterns. The lower bound on the average access
time for the optimal broadcast program of the query
patterns is derived in Section 5.1.1.
To evaluate the performance of the proposed scheduling
algorithm, a set of experiments is performed by generating
different kinds of access graphs. We compare the performance
of the proposed algorithm with the one proposed in
[6]. In [6], a scheduling algorithm called PartiallyLinearOrder
is proposed to schedule a weighted acyclic access graph. In
the algorithm, the edge with the largest weight is removed
from the access graph and the vertices connected by the
edge are merged into one vertex, named multi_vertices,
where the order of the vertices in the multi_vertices is
determined by an equation. The process is repeated until all
edges are removed and the final multi_vertices is the
broadcast program. Notice that our scheduling algorithm
can schedule any directed weighted access graph. Moreover,
our approach can deal with the variation in data object
sizes. In addition to comparing with the result of the
PartiallyLinearOrder, the average access time of our
approach is also compared with the lower bound on the
average access time for the optimal broadcast program of
the access graph. The lower bound on the average access
time for the optimal broadcast program of the access graph
is derived in Section 5.1.2.