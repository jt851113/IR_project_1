Apriori
property that can be stated as "if a pattern P is significant,
then any subpattern of P is also significant". This property
holds for the support model but is not true in the information
model. For example, in Figure 2, the information gain
G((a2, *, *, *)) = 0.90 x 3 = 2.70 which is less than the information
gain of pattern (a2,a6, *, *) (i.e., 4.70). If the threshold
is set to be 4.5, then (a2, a6, *, *) qualifies while (a2, *, *, *)
does not. (Note that a6 is an infrequent event which occurs
only three times in the event sequence.) This implies that the
algorithms developed for the support model are not applicable.
The pruning power of the support model essentially comes
from the fact that if we know a pattern is not valid, we do not
need to examine its superpatterns. Can we achieve a similar
pruning power under the information model? To answer this
question, we first introduce a concept called extensible prefix.
DEFINITION 4.1. For a pattern P ---- (Pl,p2,... ,p~), the tuple
(pl,p2,... ,pi) is called a prefix of P where 1 < i < I.
A prefix is part of a pattern. A pattern can be generated by
appending more events to the prefix. For instance, (al, *, a4) is
a prefix of patterns (al, *, a4, an) (al, *, a~, a2), (an, *, a4, a4),
and (al, *, a4, *), etc.
DEFINITION 4.2. Given an information gain threshold, a prefix
is extenslble in a given sequence if at least one pattern
with this prefix is surprising (i.e., whose information gain meets
the threshold), and is inextensible otherwise.
It follows from the definition that, all prefixes of a surprising
pattern are extensible, and any pattern with an inextensible
prefix cannot be a surprising pattern. In order to find all surprising
patterns, we only need to examine extensible prefixes.
Fortunately, we have the following theorem.
THEOREM 4.1. (Bounded information gain) Given an
information gain threshold min_gain and a period length I, a
prefix Pi = (pl,p2 . . . . ,p~), is not extensible iff Repetition(Pi) <
min-sain " er â€§ e max i,~Yo wn e max_mlo = I(Pi) + ~=i+1 fk is the maximum
information that can be carried by any pattern with prefix
Pi and ]k is the highest information that can be carried by any
potential event at the (unspecified) position k of the pattern for
a given sequence.
The proof of this theorem is in [14]. Once a prefix is deemed
to be inextensible, we will immediately eliminate it from any
further examination. Only extensible prefixes will be used to
extend to longer (extensible) prefixes and to construct candidate
patterns. Furthermore, given a period length l, for any
prefix Pi = (pl,p2,... ,pi), consider an unspecified position k
where i < k < I. Not every event can potentially serve on position
k of a surprising pattern with prefix Pi. An event e 6 E
can possibly be a candidate for position k only if e recurs on position
k sufficient number of times. In particular, the minimum
required number of repetitions is min_rep = min_~ain
I(P~)+E~=~+I fj "
This indicates that only a (small) subset of events may serve as
the candidates for each unspecified position and we can limit
our search to these candidate events, and also leads to the
following remark..
REMARK 4.1. (Candidate pruning) For any two prefixes
P~I -- (pl,p2 . . . . ,pil) and P~2 = (pl,p2,...,p~2) where il <
i2, any candidate event e on position k (i2 < k <_ l) for prefix
Pi2 must also be a candidate on position k for prefix Pil, where
l is the period length.
The proof of this remark is in [14]. Remark 4.1 states that,
as the prefix grows longer by filling some unspecified positions,
the candidate set of a still open position will only shrink
monotonically. This provides us with the opportunity to mine
surprising patterns by only proceeding with candidate event
for each position. Powered with this pruning technique, we
develop a progressive approach by starting from extensible prefixes
that contain only one filled position (the remaining positions
are unspecified) and then proceeding to extensible prefixes
with more filled positions gradually to achieve the maximum
pruning effect. A candidate event list for each open (i.e.,
unspecified) position is maintained and continuously pruned
when more positions are filled. This process continues until
all surprising patterns have been identified by examining
and extending extensible prefixes. A depth first algorithm is
then developed to generate all qualified patterns in a recursive
manner.
Another observation we made is that a segment shall not
support a pattern P, if it does not support one of P's prefixes.
To expedite the process, when we examine a prefix Q, we may
screen out those segments that do not support Q and only
retain the projected subsequence of Q so that the evaluation
of any prefix containing Q would not have to resort to the
original sequence. Note that the projected subsequence will
also be further pruned every time the algorithm proceeds to
a prefix with more specified positions. For a given period l,
starting with a pattern frame of l slots (without any specific
event assigned), potential patterns (or prefixes of potential
patterns) are generated progressively by every time assigning
a candidate event to a still-open position. Such assignment
may lead to both a refinement of event candidates for the
remaining position(s) by applying the above property and a
further projection of the projected subsequence by specifying
some of the remaining open positions.
The main procedure of mining patterns for a given pattern
period is described in the procedure InfoMiner. InfoMiner is a
recursive function. At the kth level of recursion, the patterns
with k non-eternal events are examined. For example, all singular
patterns (e.g., (al, *, *, *)) are examined at the initial
invocation of InfoMiner, at the second level of invocations of
InfoMiner, all candidate patterns with two non-eternal events
(e.g., (al,*,*,a~)) are evaluated; an so on. This is achieved
by extending the extensible prefixes to include an additional
event during each invocation of InfoMiner and passing the new
prefixes to the next level of recursion. Notice that at most I
levels of recursion may be invoked to mine patterns of period
I.
Being more specific, at each level of the recursion, we evaluate
patterns with certain prefixes in a projected subsequence
S. Starting from a null prefix and the sequence in Figure 2, the
number of repetitions for each candidate event of each open
position is collected from the projected subsequence S. Then
the bounded information gain property is employed to refine
the candidate list for each remaining open position. Finally,
for each open position i and each event e in the refined candidate
list, a new prefix is created by extending the original one
to include the event e on the ith open position. Note that this
newly created prefix is guaranteed to be extensible and would
have the same number of repetitions as the event e at position
l--i
i. A candidate pattern P = (prefix,*'~..*) is constructed by
filling all remaining open positions following the prefix with
the eternal event *. We then verify whether P has sufficient
information gain. The projected subsequence on each new
prefix is also generated. The pseudo code of InfoMiner can be
found in [14].
Figure 3(a) shows the projected subsequence of prefix (al).
Next, we compute the number of repetitions of each event
at every position (Figure 3(b)). Then we refine the set of
candidate events by the minimum repetitions (Figure 3(c)).
The new set of prefixes are generated in Figure 3(d). Finally,
we append eternal event(s) to each new prefix to generate a
set of patterns with I events. Figure 3(e) shows the set of
patterns that satisfy the minimum information gain threshold.
The InfoMiner algorithm continues until l levels.