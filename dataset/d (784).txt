The straight-forward approach to discovering cyclic association
rules is to generate the rules in each time unit
with one of the existing methods [AS94, SON95] and then
apply a pattern matching algorithm (See Section 3.4) to
discover cycles. We refer to this approach as the sequential
algorithm. The existing algorithms discover the association
rules in two steps. In the first step, large itemsets are generated.
In the second step, association rules are generated
from the large itemsets.
The running time for generating large itemsets can be
substantial, since calculating the supports of itemsets and
detecting all the large itemsets for each time unit grows
exponentially in the size of the large itemsets. To reduce the
search space for the large itemsets, the existing algorithms
exploit the following property:
‚ÄúAny superset of a small itemset must also be small.‚Äù
The existing algorithms calculate support for itemsets iteratively
and they prune all the supersets of a small itemset
during the consecutive iterations. Let us refer to this
pruning technique as support-pruning. In general, these
algorithms execute a variant of the following steps in theiteration:
1. The set of candidate 
itemsets is generated by extending
the large  
1
 
itemsets discovered in the
previous iteration (support-pruning).
2. Supports for the candidate 
itemsets are determined
by scanning the database.
3. The candidate 
itemsets that do not have minimum
support are discarded and the remaining ones constitute
the large 
itemsets.
The idea is to discard most of the small 
itemsets during
the support-pruning step so that the database is searched
only for a small set of candidates for large  
itemsets.
In the second step, the rules that exceed the confidence
threshold	   	
are constructed from the large itemsets
generated in the first step with one of the existing algorithms.
For our experimental evaluation of the sequential
algorithm, we implemented the apriori and the ap-genrules
algorithms from [AS94]. Once the rules of all the time units
have been discovered, cycles need to be detected. Let

be
the number of rules detected. The complexity of the cycle
detection phase has an upper bound of
    	
where

is the number of time units and

is the maximum cycle
length of interest (see Section 3.4). If all the rules in
each time unit fit into main memory, then the running time
of the cycle detection phase is feasible. However, if the
rules in all the time units do not fit into main memory, then
the overhead of I/O operations substantially increases the
running time of the cycle detection phase (see Section 5),
and therefore the sequential algorithm may become infeasible
for detecting cyclic association rules. The issue of
memory management for cycle detection will be further
discussed in Section 4.