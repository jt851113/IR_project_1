As a variation on the continuous, polling based mechanisms for data acquisition, TinyDB supports events as a mechanism for initiating data collection. Events in TinyDB are generated explicitly, either by another query or the operating system (in which case the code that generates the event must have been compiled into the sensor node.) For example, the query:
could be used to report the average light and temperature level at sensors near a bird nest where a bird has just been detected. Every time a bird-detect event occurs, the query is issued from the detecting node and the average light and temperature are collected from nearby nodes once every 2 seconds for 30 seconds.
Such events are central in ACQP, as they allow the system to be dormant until some external conditions occurs, instead of continually polling or blocking on an iterator waiting for some data to arrive. Since most microprocessors include external interrupt lines than can wake a sleeping device to begin processing, events can provide signi?cant reductions in power consumption, shown in Figure 3.
This ?gure shows an oscilloscope plot of current draw from a device running an event-based query triggered by toggling a switch connected to an external interrupt line that causes the device to wake from sleep. Compare this to plot at the bottom of Figure 3, which shows an eventbased query triggered by a second query that polls for some condition to be true. Obviously, the situation in the top plot is vastly preferable, as much less energy is spent polling. TinyDB supports such externally triggered queries via events, and such support is integral to its ability to provide low power processing.
Events can also serve as stopping conditions for queries. Appending a clause of the form STOP ON EVENT(param) WHERE cond(param) will stop a continuous query when the speci?ed event arrives and the condition holds.
In the current implementation of TinyDB, events are only signalled on he local node â€“ we do not provide a fully distributed event propagation system. Note, however, that queries started in response to a local event may be disseminated to other nodes (as in the example above).
