The AlvisP2P architecture is layered in order to separate
dierent conceptual levels, and allow the higher layers to use
the functionalities provided by the lower ones. Altogether,
it comprises the following layers:
L1 A transport layer, which provides the means for direct
communication between two peers;
L2 A peer-to-peer layer, which maintains the Peer-to-Peer
overlay infrastructure;
L3 A distributed IR layer, which provides the basic func-
tionalities related to document management, in par-
ticular the ones related to distributed IR;
L4 A ranking layer, which implements functionalities re-
lated to distributed document ranking; and
L5 A local search layer, which implements possibly sophis-
ticated local IR models.
Figure 2 shows all major AlvisP2P functionalities posi-
tioned in the corresponding layers. Each layer is composed
of components that have been speci¯ed to ful¯ll the required
functionalities [4]. While components in higher layers exclu-
sively rely on the functionalities provided by lower layers, the
architecture does not prevent from having diRerent types of
peers integrating in a more or less extensive way the layers
from 3 above. For example, a lightweight peer could only
integrate layers 1 to 4, while a peer associated with a more
sophisticated local search engine could exploit all 5 layers.
The discussion on the performance issues of such a system
is presented in [4].
Layers 1 and 2 implement the peer-to-peer overlay infras-
tructure. Layer 2 (or P2P layer) consists of a Distributed
Hash Table (DHT) that is able to sustain high tra±c loads.
Peers build routing tables of size O(log n), which results in
an expected routing cost of O(log n) hops (where n is the
number of peers in the network). As it uses the concept of
\hop space" for routing table construction, the DHT sup-
ports arbitrary skews in the distribution of the peers in the
identi¯er space [3]. In addition, we integrated a congestion
control mechanism into our DHT [2] to e±ciently handle the
large amounts of messages generated by the information re-
trieval application and to prevent the DHT from congestion
collapses.
Layer 3 provides the features related to distributed infor-
mation retrieval and implements one of the aforementioned
techniques, i.e., indexing with highly discriminative keys
(HDK) or query driven indexing (QDI). This layer deals
with the task of key-based indexing, i.e., ¯nding the set of
keys and associated posting lists for a given document, and
the querying task, i.e., given a query, ¯nding corresponding
keys in the global P2P index, retrieving the postings associ-
ated with those keys and merging the result set for ranking.
Additionally, the QDI approach uses Layer 3 to collect the
popularity statistics that de¯ne the keys to be indexed.
Layer 4 is responsible for ranking. Depending on the rank-
ing model1, it might use global document frequencies, aver-
age document length, term frequencies and other statistical
information, which are stored in the P2P network, to com-
pute the relevant scores of documents w.r.t the query.
Layer 5 implements a possibly sophisticated \local search
engine". For example, as shown in Figure 3, such a search
engine can use specialized document processing for its lo-
cal collection to build semantically rich indexes enhanced
by various ranking strategies2. The local search engine in-
teracts with the associated peer through a generic API and
uses a well-de¯ned communication protocol to submit the
index of its local collection to the global P2P network and
to process queries.
More precisely, the answer to a given query can be:
2 either produced exclusively using the information avail-
able in the distributed index and a uniform distributed
ranking model; in this case the retrieval mechanism guar-
antees good response times, but, possibly, at the price of
a lower precision;
2 or re¯ned in a second step during which the query is
forwarded to the local search engines associated with the
peers holding the documents found in the ¯rst step; in
this case the retrieval might be slower (as it requires
several interactions), but can bene¯t from the advanced
features made available by the local engines.