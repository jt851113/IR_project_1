Two projects are representative of the efforts that are made to build wireless sensor network infrastructures: The WINS project at UCLA [17] and the Smart Dust project at UC Berkeley [14]. The model of sensor database that we introduce in Section 2 is applicable to both types of sensor networks. The COUGAR system is implemented on top of the WINS infrastructure. The goals of the DataSpace project at Rutgers University are quite similar to the goals of a sensor database system [9]. Imielinski et al. recognized the advantages of the distributed approach over the warehousing approach for querying physical devices. In a DataSpace, devices that encapsulate data can be queried, monitored and controlled. Network primitives are developed to guarantee that only relevant devices are contacted when a query is evaluated. We are currently integrating COUGAR with similar networking primitives, i.e., the Declarative Routing Protocol developed at MIT-LL [5], and the SCADDS diffusion-based routing developed at ISI [10]. Other related projects include the TELEGRAPH project at UC Berkeley [1], which studies adaptive query processing techniques, and the SAGRES project at the University of Washington [11], which explores the use of data integration techniques in the context of device networks. The environment of a sensor network with computing power at each node resembles a mobile computing environment [8]. Sensors differ from mobile hosts in that sensors only serve external requests but do not initiate requests themselves. Also, recent work on indexing moving objects, e.g. [16], is relevant in such environments. The techniques proposed however assume a centralized warehousing approach.  Our definition of sensor queries bears similarities with the definition of continuous queries [23]. Continuous queries are defined over append-only relations with timestamps. For each continuous query, an incremental query is defined to retrieve all answers obtained in an interval of t seconds. The incremental query is issued repeatedly, every t seconds, and the union of the answers it provides constitute the answer to the continuous query. Instead of being used to maintain a persistent view, 
incremental results are directly returned to users. The answers returned by the initial prototype of COUGAR respect the continuous queries semantics.  Time series can be manipulated in object-relational systems such as Oracle [16] or in array database systems such as KDB [13]. These systems do not support the execution of long-running queries over sequences. 