We saw in the previous sections how TinyDB can exploit query semantics to transmit the most relevant results when limited bandwidth or power is available. In this section, we discuss selecting and adjusting sampling and transmission rates to limit the frequency of networkrelated losses and ?ll rates of queues. This adaptation is the other half of the runtime techniques in ACQP: because the system can adjust rates, signi?cant reductions can be made in the frequency with which data prioritization decisions must be made. These techniques are simply not available in non-acquisitional query processing systems.
When initially optimizing a query, TinyDB’s optimizer chooses a transmission and sample rate based on current network load conditions, and requested sample rates and lifetimes. However, static decisions made at the start of query processing may not be valid after many days running the same continuous query. Just as adaptive query processing systems like Tukwila and Eddy [26, 6] dynamically reorder operators as the execution environment changes, TinyDB must react to changing conditions – however, unlike in previous adaptive query processing systems, failure to adapt in TinyDB can bring the system to its knees, reducing data ?ow to a trickle or causing the system to severely miss power budget goals.
We study the need for adaptivity in two contexts: network contention and power consumption. We ?rst examine network contention. Rather than simply assuming that a speci?c transmission rate will result in a relatively uncontested network channel, TinyDB monitors channel contention and adaptively reduces the number of packets transmitted as contention rises. This backoff is very important: as the 4 motes line of Figure 9 shows, if several nodes try to transmit at high rates, the total
number of packets delivered is substantially less than if each of those nodes tries to transmit at a lower rate. Compare this line with the performance of a single node (where there is no contention) – a single node does not exhibit the same falling off because there is no contention (although the percentage of successfully delivered packets does fall off.) Finally, the 4 motes adaptive line does not have the same precipitous performance because it is able to monitor the network channel and adapt to contention.
Note that the performance of the adaptive approach is slightly less than the non-adaptive approach at 4 and 8 samples per second as backoff begins to throttle communication in this regime. However, when we compared the percentage of successful transmission attempts at 8 packets per second, the adaptive scheme achieves twice the success rate of the non-adaptive scheme, suggesting the adaptation is still effective in reducing wasted communication effort, despite the lower utilization.
 