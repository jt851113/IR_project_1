Monitoring applications are those where streams of information, triggers, real-time requirements, and imprecise data are prevalent. Traditional DBMSs are based on the HADP model, and thus cannot provide adequate support for such applications. In this paper, we have described the architecture of Aurora, a DAHP system oriented towards monitoring applications. We argued that providing efficient support for these demanding applications not only require critically revisiting many existing aspects of database design and implementation, but also require developing novel proactive data storage and processing concepts and techniques.
In this paper, we first presented the basic Aurora architecture, along with the primitive building blocks for workflow processing. We followed with several heuristics for optimizing a large Aurora network. We then focused on run-time data storage and processing issues, discussing storage organization, real-time scheduling, introspection, and load shedding, and proposed novel solutions in all these areas.
We are currently implementing an Aurora prototype system, which we will use to investigate the practicality and efficiency of our proposed solutions. We are also investigating two important research directions. While the bulk of the discussion in this paper describes how Aurora works on a single computer, many stream-based applications demand support for distributed processing. To this end, we are working on a distributed architecture, Aurora*, which will enable operators to be pushed closer to the data sources, potentially yielding significantly improved scalability, energy use, and bandwidth efficiency. Aurora* will provide support for distribution by running a full Aurora system on each of a collection of communicating nodes. In particular, Aurora* will manage load by replicating boxes along a path and migrating a copy
of this sub-network to another more lightly loaded node. A subset of the stream inputs to the replicated network would move along with the copy. We are also extending our basic data and processing model to cope with missing and imprecise data values, which are common in applications involving sensor-generated data streams.
References
[1] Berkeley DB. Sleepycat Software,
http://www.sleepycat.com/.
[2] Informix White Paper. Time Series: The Next Step for Telecommunications Data Management.
[3] M. Altinel and M. J. Franklin. Efficient Filtering of XML Documents for Selective Dissemination of Information. In Proc. of the 26th Intl. Conf. on Very Large Data Bases, Cairo, Egypt, 2000.
[4] R. Avnur and J. Hellerstein. Eddies: Continuously Adaptive Query Processing. In Proc. of the 2000 ACM SIGMOD Intl. Conf. on Management of Data, Dallas, TX, 2000.
[5] S. Babu and J. Widom. Continuous Queries over Data Streams. SIGMOD Record, 30(3):109-120, 2001.
[6] D. Barbara, W. DuMouchel, C. Faloutsos, P. J. Haas, J. M. Hellerstein, Y. E. Ioannidis, H. V. Jagadish, T. Johnson, R. T. Ng, V. Poosala, K. A. Ross, and K. C. Sevcik. The New Jersey Data Reduction Report. IEEE Data Engineering Bulletin, 20(4):3-45, 1997.
[7] J. Chen, D. J. DeWitt, F. Tian, and Y. Wang. NiagaraCQ: A Scalable Continuous Query System for Internet Databases. In Proc. of the 2000 ACM SIGMOD Intl. Conf. on Management of Data, Dallas, TX, 2000.
[8] H. Garcia-Molina and K. Salem. Main Memory Database Systems: An Overview. IEEE Transactions on Knowledge and Data Engineering, 4(6):509-516, 1992.
[9] J. Gehrke, F. Korn, and D. Srivastava. On Computing Correlated Aggregates over Continual Data Streams. In Proc. of the 2001 ACM SIGMOD Intl. Conf. on Management of Data, Santa Barbara, CA, 2001.
[10] A. Gupta and I. S. Mumick. Maintenance of Materialized Views: Problems, Techniques, and Applications. IEEE Data Engineering Bulletin, 18(2):3-18, 1995.
[11] E. N. Hanson, C. Carnes, L. Huang, M. Konyala, L. Noronha, S. Parthasarathy, J. B. Park, and A. Vernon. Scalable Trigger Processing. In Proc. of the 15th Intl. Conf. on Data Engineering, Sydney, Austrialia, 1999.
[12] J. M. Hellerstein, P. J. Haas, and H. J. Wang. Online Aggregation. In Proc. of the 1997 ACM SIGMOD Intl. Conf. on Management of Data, Tucson, 1997.
[13] Z. G. Ives, D. Florescu, M. Friedman, A. Levy, and D. S. Weld. An Adaptive Query Execution System for Data Integration. In Proc. of the 1999 ACM SIGMOD Intl. Conf. on Management of Data, Philadelphia, PA, 1999.
[14] H. V. Jagadish, I. S. Mumick, and A. Silberschatz. View Maintenance Issues for the Chronicle Data Model. In Proc. of the 14th Symposium on Principles of Database Systems, San Jose, CA, 1995.
[15] B. Kao and H. Garcia-Molina. An Overview of Realtime Database Systems. In Real Time Computing, W. A. Halang and A. D. Stoyenko, Eds.: Springer-Verlag, 1994.
[16] S. Madden and M. J. Franklin. Fjording the Stream: An Architecture for Queries over Streaming Sensor Data. In Proc. of the 18th Intl. Conf. on Data Engineering, San Jose, CA, 2002.
[17] S. R. Madden, M. A. Shah, J. M. Hellerstein, and V. Raman. Continuously Adaptive Continuous Queries Over Streams. In Proc. of the 2002 ACM SIGMOD Intl. Conf. on Management of Data, Wisconsin, USA, 2002.
[18] C. Mohan, D. Agrawal, G. Alonso, A. E. Abbadi, R. Gunther, and M. Kamath. Exotica: A Project on Advanced Transaction Management and Workflow Systems. SIGOIS Bulletin, 16(1):45-50, 1995.
[19] J. Nieh and M. S. Lam. The Design, Implementation and Evaluation of SMART: A Scheduler for Multimedia Applications. In Proc. of the 16th Intl. ACM Symposium on Operating Systems Principles, 1997.
[20] G. Ozsoyoglu and R. T. Snodgrass. Temporal and Real-Time Databases: A Survey. IEEE Transactions on Knowledge and Data Engineering, 7(4):513-532, 1995.
[21] N. Paton and O. Diaz. Active Database Systems. ACM Computing Surveys, 31(1):63-103, 1999.
[22] U. Schreier, H. Pirahesh, R. Agrawal, and C. Mohan. Alert: An Architecture for Transforming a Passive DBMS into an Active DBMS. In Proc. of the 17th Intl. Conf. on Very Large Data Bases, Barcelona, Spain, 1991.
[23] T. K. Sellis and S. Ghosh. On the Multiple-Query Optimization Problem. IEEE Transactions on Knowledge and Data Engineering, 2(2):262-266, 1990.
[24] P. Seshadri, M. Livny, and R. Ramakrishnan. The Design and Implementation of a Sequence Database System. In Proc. of the 22nd Intl. Conf. on Very Large Data Bases, Bombay, India, 1996.
[25] M. Sullivan and A. Heybey. Tribeca: A System for Managing Large Databases of Network Traffic. In Proc. of the USENIX Annual Technical Conf., New Orleans, LA, 1998.
[26] T. Urhan and M. J. Franklin. Dynamic Pipeline Scheduling for Improving Interactive Query Performance. In Proc. of the 27th Intl. Conf. on Very Large Data Bases, Rome, Italy, 2001.
[27] C. Yang and A. V. S. Reddy. A Taxonomy for Congestion Control Algorithms in Packet Switching Networks. IEEE Network, 9(5):34-44, 1995.