There has been some recent publication in the database and systems communities on query processing-like operations in sensor networks [25, 31, 36, 30, 43]. As mentioned above, these papers noted the importance of power sensitivity. Their predominant focus to date has been on in-network processing â€“ that is, the pushing of operations, particularly selections and aggregations, into the network to reduce communication. We too endorse in-network processing, but believe that, for a sensor network system to be truly power sensitive, acqusitional issues of when, where, and in what order to sample and which samples to process must be considered. To our knowledge, no prior work addresses these issues.
There is a small body of work related to query processing in mobile environments [24, 2]. This work is concerned with laptop-like devices that are carried with the user, can be readily recharged every few hours, and, with the exception of a wireless network interface basically have the capabilities of a wired, powered PC. Lifetime-based queries, notions of sampling the associated costs, and runtime issues regarding rates and contention are not considered. Many of the proposed techniques, as well as more recent work on moving object databases (such as [41]) focus on the highly mobile nature of devices, a situation we are not (yet) dealing with, but which could certainly arise in sensor networks.
Power sensitive query optimization was proposed in [1], although, as with the previous work, the focus is on optimizing costs in tradtional mobile devices (e.g. laptops and palmtops), so concerns about the cost and ordering of sampling do not appear. Furthermore, laptop-style devices typically do not offer the same degree of rapid power-cycling that is available on embedded platforms like motes. Even if they did, their interactive, user oriented nature makes it undesirable to turn off displays, network interfaces, etc. because they are doing more than simply collecting and processing data, so there are many fewer power optimizations that can be applied.
Building an SRT is analogous to building an index in a conventional database system. Due to the resource limitations of sensor networks, the actual indexing implementations are quite different. See [27] for a survey of relevant research on distributed indexing in conventional database systems. There is also some similarity to indexing in peerto-peer systems [4]. However, peer-to-peer systems differ in that they are inexact and not subject to the same paucity of communications or storage infrastructure as sensor networks, so algorithms tend to be storage and communication heavy. Similar indexing issues also appear in highly mobile environments (like [41, 24]), but this work relies on a centralized location servers for tracking recent positions of objects.
The observation that interleaving the fetching of attributes and application of operators also arises in the context of compressed databases [11], as decompression effectively imposes a penalty for fetching an individual attribute, so it is bene?cial to apply selections and joins on already decompressed or easy to decompress attributes.
There is a large body of work on event-based query processing in the active database literature. Languages for event composition and systems for evaluating composite events, such as [10], as well as systems for ef?ciently determining when an event has ?red, such as [19] could (possibly) be useful in TinyDB.
Approximate and best effort caches [35], as well as systems for onlineaggregation [38] and approximate [17] and stream query processing [34, 7] include some notion of data quality. Most of this other work is focused on quality with respect to summaries, aggregates, or staleness of individual objects, whereas we focus on quality as a measure of ?delity to the underlying continuous signal. Aurora [7] mentions a need for this kind of metric, but proposes no speci?c approaches.
