In the past few years, smart-sensor devices have matured to the point that it is now feasible to deploy large, distributed networks of such sensors [37, 21, 32, 8]. Sensor networks are differentiated from other wireless, battery powered environments in that they consist of tens or hundreds of autonomous nodes that operate without human interaction (e.g. con?guration of network routes, recharging of batteries, or tuning of parameters) for weeks or months at a time. Furthermore, sensor networks are often embedded into some (possibly remote) physical environment from which they must monitor and collect data. The long term, low power nature of sensor networks, coupled with their proximity to physical phenomena lead to a signi?cantly altered view of software systems than that of more traditional mobile or distributed environments.
In this paper, we are concerned with query processing in sensor networks. Researchers have noted the bene?ts of a query processor-like interface to sensor networks and the need for sensitivity to limited power and computational resources [25, 30, 36, 43, 31]. Prior systems, however, tend to view query processing in sensor networks simply as a power-constrained version of traditional query processing: given some set of data, they strive to process that data as energy-ef?ciently as possible. Typical strategies include minimizing expensive communication by applying aggregation and ?ltering operations inside the sensor network – strategies that are similar to push-down techniques from distributed query processing that emphasize moving queries to data.
In contrast, we present acquisitional query processing (ACQP), where we focus on the signi?cant new query processing opportunity that arises in sensor networks: the fact that smart sensors have control over where, when, and how often data is physically acquired (i.e. sampled) and delivered to query processing operators. By focusing on the locations
and costs of acquiring data, we are able to signi?cantly reduce power consumption compared to traditional passive systems that assume the a priori existence of data. Acquisitional issues arise at all levels of query processing: in query optimization, due to the signi?cant costs of sampling sensors; in query dissemination, due to the physical co-location of sampling and processing; and, most importantly, in query execution, where choices of when to sample and which samples to process are made. Of course, techniques proposed in other research on sensor and power-constrained query processing, such as pushing down predicates and minimizing communication are also important alongside ACQP and ?t comfortably within its model.
We have designed and implemented an ACQP engine, called TinyDB, that is a distributed query processor which runs on each of the nodes in a sensor network. TinyDB runs on the Berkeley Mica mote platform, on top of the TinyOS [21] operating system. We chose this platform because the hardware is readily available from commercial sources [12] and the operating system is relatively mature. TinyDB has many of the features of a traditional query processor (e.g. the ability to select, join, project, and aggregate data), but, as we will discuss in this paper, also incorporates a number of other features designed to minimize power consumption via acquisitional techniques. These techniques, taken in aggregate, can lead to orders of magnitude improvement in power consumption and increased accuracy of query results over nonacquisitional systems that do not actively control when and where data is collected.
We address a number of ACQP-related questions, including:
1. When should samples for a particular query be taken?
2. What sensor nodes have data relevant to a particular query?
3. In what order should samples for this query be taken, and how should sampling be interleaved with other operations?
4. Is it worth expending computational power or bandwidth to process and relay a particular sample?
Of these issues, question (1) is unique to ACQP. The remaining questions can be answered by adapting techniques that are similar to those found in traditional query processing. Notions of indexing and optimization, in particular, can be applied to answer questions (2) and (3), and question (4) bears some similarity to issues that arise in stream processing and approximate query answering. We will address each of these questions, noting the unusual kinds of indices, optimizations, and approximations that are required in ACQP under the speci?c constraints posed by sensor networks.
Figure 1 illustrates the basic architecture that we follow throughout
Paper under submission. Please do not distribute without permission. 2
this paper – queries are submitted at a powered PC (the base station) , parsed, optimized and sent into the sensor network, where they are disseminated and processed, with results ?owing back up the routing tree that was formed as the queries propagated. After a brief introduction to sensor networks in Section 2, the remainder of the paper discusses each of these phases of ACQP: Section 3 covers our query language, Section 4 highlights optimization issues in power-sensitive environments, Section 5 discusses query dissemination, and ?nally, Sections 6 discusses our adaptive, power-sensitive model for query execution and result collection.