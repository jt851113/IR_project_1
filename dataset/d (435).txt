If a symbol d and period l pair has passed the distance-
based pruning, then the segment-based approach (SB) is
used to discover the subsequence with the most repetitions of
(d; ; : : : ; ) with period l. Before presenting the algorithm
we introduce the concept of extendibility and subsequence
dominance. At a given position i, a subsequence X with
ending position j (j < i) is extendible if j 
When scanning through the symbol sequence, at any po-
sition, the set of extendible subsequences consists of those
subsequences that still have potential to \grow". For ex-
ample, at position 20 in Figure 1(c), both X and Y are
extendible if max dis = 6 For any two valid subsequences
X and Y , we say that X dominates Y i the number of rep-
etitions of X is greater than or equal to that of Y . Clearly,
X dominates Y in Figure 1(c) at position 20.
This subsequence dominance denes a total ordering among
the set of valid subsequences that are considered to be ex-
tendible at any given position. If X dominates Y at some
position i (Figure 1(c)), then the subsequence X0 generated
by appending Z to X starting at position i cannot be shorter
than the extension Y 0 of Y generated by appending Z to Y .
Therefore, we do not need to extend Y at position i. Note
that we still have to keep Y since we may need to extend Y
(to include V in Figure 1(c)) at some later position j(j > i).
This scenario may happen when X ends at an earlier posi-
tion than Y does and X is known to be not extendible at
position j. This provides the motivation and justication of
the pruning technique employed in our algorithm.
When scanning through a sequence to determine the longest
subsequence containing a pattern (d; ; : : : ; ), the discovery
process may experience the following phases repeatedly:

 Phase A: Segment validation. At least one instance of
(d; ; : : : ; ) is found (in the latest segment of a subse-
quence), but the number of repetitions of the pattern
is still less than min rep.

 Phase B: Valid segment growth. The segment is now
considered to be valid and the repetition count may
continue to grow.

 Phase C: Extension (or disturbance). A valid segment
may have ended. It is now going through some dis-
turbance or noise region to see whether it can get
extended to another segment of the pattern within
max dis, referred to as the extension window. If so, it 
returns to Phase A. Otherwise the subsequence termi-
nates.

There are several challenges here. First of all, the transition
point from Phase B to C is not obvious. Although missing
the next consecutive match clearly signals the transition to
Phase C, the presence of the next match does not necessarily
mean the continuation of Phase B. This is illustrated by Y
in Figure 1(d) at position 10. Secondly, the transition point
from Phase C to A is not straightforward, either. In fact, any
(not just the rst) d occurring within the extension window
can potentially be a candidate leading to a new extension
of the subsequence. For Y in Figure 1(d), it is the second
d1 (at position 25) in the extension window that leads to a
longer valid segment. We thus need to develop an ecient
tracking mechanism for managing the phase transitions.

Furthermore, there is also the pruning issue. There can
be many overlapping subsequences of a pattern. An e-
cient pruning criterion needs to be developed to prune the
subsequences that cannot become the longest valid subse-
quence. This will reduce the number of concurrent subse-
quences that need to be tracked. The problem here is that
the longest subsequence at a particular instant may be over-
taken by a shorter overlapping subsequence. This is clearly
demonstrated in Figure 1(d) by X and Y . Assume that
min rep = 3 and max dis = 6. At position 29, after rec-
ognizing S3 as a valid segment (before S4 is recognized), X
overtakes Y even though Y grows to be the longest valid
subsequence later. However, we also observe that for any
two valid subsequences X0 and Y 0 that end at the same po-
sition k in the sequence and X0 dominates Y 0, any further
extension of Y 0 will always be dominated by some extension
of X0 (Figure 1(e)). We can thus prune Y 0 after position k.
A good point to check for dominance relationship is when a
segment Z rst becomes valid. This is the point where X0
that encompasses Z becomes valid and the two overlapping
subsequences converge to a common tail segment.

The SB algorithm scans through the input data sequence.
Each time a match of pattern (d; ; : : : ; ) is identied (say,
at position i), the set of currently extendible subsequences
are extended according to the following principles.

 Mark the subsequences that end prior to position i??1
as in Phase C.

 Only the dominating subsequence in Phase B is ex-
tended to include the newly discovered match.

 For each subsequence in Phase A, simply extend it by
one repetition and check whether the transition point
to Phase B is reached. If so, mark this subsequence as
in Phase B. If multiple subsequences are in Phase B,
then only the dominating one is retained.

 The subsequence with most repetitions in Phase B and
C is identied and used to update the longest valid
subsequence for pattern (d; ; : : : ; ).

 The dominating subsequence in Phase C is also ex-
tended. The newly discovered match serves as the be-
ginning of a new segment and the subsequence transits
to Phase A.

[4] shows that with carefully designed data structures, a sin-
gle scan of the sequence is sucient to locate the longest
subsequence with approximately linear storage requirement.